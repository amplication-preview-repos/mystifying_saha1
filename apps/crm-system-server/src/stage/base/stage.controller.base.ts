/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { StageService } from "../stage.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { StageCreateInput } from "./StageCreateInput";
import { Stage } from "./Stage";
import { StageFindManyArgs } from "./StageFindManyArgs";
import { StageWhereUniqueInput } from "./StageWhereUniqueInput";
import { StageUpdateInput } from "./StageUpdateInput";
import { DynamicFieldFindManyArgs } from "../../dynamicField/base/DynamicFieldFindManyArgs";
import { DynamicField } from "../../dynamicField/base/DynamicField";
import { DynamicFieldWhereUniqueInput } from "../../dynamicField/base/DynamicFieldWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class StageControllerBase {
  constructor(
    protected readonly service: StageService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Stage })
  @nestAccessControl.UseRoles({
    resource: "Stage",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createStage(@common.Body() data: StageCreateInput): Promise<Stage> {
    return await this.service.createStage({
      data: {
        ...data,

        scheme: data.scheme
          ? {
              connect: data.scheme,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        scheme: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Stage] })
  @ApiNestedQuery(StageFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Stage",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async stages(@common.Req() request: Request): Promise<Stage[]> {
    const args = plainToClass(StageFindManyArgs, request.query);
    return this.service.stages({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        scheme: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Stage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Stage",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async stage(
    @common.Param() params: StageWhereUniqueInput
  ): Promise<Stage | null> {
    const result = await this.service.stage({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        scheme: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Stage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Stage",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateStage(
    @common.Param() params: StageWhereUniqueInput,
    @common.Body() data: StageUpdateInput
  ): Promise<Stage | null> {
    try {
      return await this.service.updateStage({
        where: params,
        data: {
          ...data,

          scheme: data.scheme
            ? {
                connect: data.scheme,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,

          scheme: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Stage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Stage",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteStage(
    @common.Param() params: StageWhereUniqueInput
  ): Promise<Stage | null> {
    try {
      return await this.service.deleteStage({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,

          scheme: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/dynamicFields")
  @ApiNestedQuery(DynamicFieldFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "DynamicField",
    action: "read",
    possession: "any",
  })
  async findDynamicFields(
    @common.Req() request: Request,
    @common.Param() params: StageWhereUniqueInput
  ): Promise<DynamicField[]> {
    const query = plainToClass(DynamicFieldFindManyArgs, request.query);
    const results = await this.service.findDynamicFields(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        value: true,

        stage: {
          select: {
            id: true,
          },
        },

        scheme: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/dynamicFields")
  @nestAccessControl.UseRoles({
    resource: "Stage",
    action: "update",
    possession: "any",
  })
  async connectDynamicFields(
    @common.Param() params: StageWhereUniqueInput,
    @common.Body() body: DynamicFieldWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dynamicFields: {
        connect: body,
      },
    };
    await this.service.updateStage({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/dynamicFields")
  @nestAccessControl.UseRoles({
    resource: "Stage",
    action: "update",
    possession: "any",
  })
  async updateDynamicFields(
    @common.Param() params: StageWhereUniqueInput,
    @common.Body() body: DynamicFieldWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dynamicFields: {
        set: body,
      },
    };
    await this.service.updateStage({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/dynamicFields")
  @nestAccessControl.UseRoles({
    resource: "Stage",
    action: "update",
    possession: "any",
  })
  async disconnectDynamicFields(
    @common.Param() params: StageWhereUniqueInput,
    @common.Body() body: DynamicFieldWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dynamicFields: {
        disconnect: body,
      },
    };
    await this.service.updateStage({
      where: params,
      data,
      select: { id: true },
    });
  }
}
