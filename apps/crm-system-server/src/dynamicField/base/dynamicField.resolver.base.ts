/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { DynamicField } from "./DynamicField";
import { DynamicFieldCountArgs } from "./DynamicFieldCountArgs";
import { DynamicFieldFindManyArgs } from "./DynamicFieldFindManyArgs";
import { DynamicFieldFindUniqueArgs } from "./DynamicFieldFindUniqueArgs";
import { CreateDynamicFieldArgs } from "./CreateDynamicFieldArgs";
import { UpdateDynamicFieldArgs } from "./UpdateDynamicFieldArgs";
import { DeleteDynamicFieldArgs } from "./DeleteDynamicFieldArgs";
import { Stage } from "../../stage/base/Stage";
import { Scheme } from "../../scheme/base/Scheme";
import { DynamicFieldService } from "../dynamicField.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DynamicField)
export class DynamicFieldResolverBase {
  constructor(
    protected readonly service: DynamicFieldService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DynamicField",
    action: "read",
    possession: "any",
  })
  async _dynamicFieldsMeta(
    @graphql.Args() args: DynamicFieldCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DynamicField])
  @nestAccessControl.UseRoles({
    resource: "DynamicField",
    action: "read",
    possession: "any",
  })
  async dynamicFields(
    @graphql.Args() args: DynamicFieldFindManyArgs
  ): Promise<DynamicField[]> {
    return this.service.dynamicFields(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DynamicField, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DynamicField",
    action: "read",
    possession: "own",
  })
  async dynamicField(
    @graphql.Args() args: DynamicFieldFindUniqueArgs
  ): Promise<DynamicField | null> {
    const result = await this.service.dynamicField(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DynamicField)
  @nestAccessControl.UseRoles({
    resource: "DynamicField",
    action: "create",
    possession: "any",
  })
  async createDynamicField(
    @graphql.Args() args: CreateDynamicFieldArgs
  ): Promise<DynamicField> {
    return await this.service.createDynamicField({
      ...args,
      data: {
        ...args.data,

        stage: args.data.stage
          ? {
              connect: args.data.stage,
            }
          : undefined,

        scheme: args.data.scheme
          ? {
              connect: args.data.scheme,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DynamicField)
  @nestAccessControl.UseRoles({
    resource: "DynamicField",
    action: "update",
    possession: "any",
  })
  async updateDynamicField(
    @graphql.Args() args: UpdateDynamicFieldArgs
  ): Promise<DynamicField | null> {
    try {
      return await this.service.updateDynamicField({
        ...args,
        data: {
          ...args.data,

          stage: args.data.stage
            ? {
                connect: args.data.stage,
              }
            : undefined,

          scheme: args.data.scheme
            ? {
                connect: args.data.scheme,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DynamicField)
  @nestAccessControl.UseRoles({
    resource: "DynamicField",
    action: "delete",
    possession: "any",
  })
  async deleteDynamicField(
    @graphql.Args() args: DeleteDynamicFieldArgs
  ): Promise<DynamicField | null> {
    try {
      return await this.service.deleteDynamicField(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Stage, {
    nullable: true,
    name: "stage",
  })
  @nestAccessControl.UseRoles({
    resource: "Stage",
    action: "read",
    possession: "any",
  })
  async getStage(
    @graphql.Parent() parent: DynamicField
  ): Promise<Stage | null> {
    const result = await this.service.getStage(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Scheme, {
    nullable: true,
    name: "scheme",
  })
  @nestAccessControl.UseRoles({
    resource: "Scheme",
    action: "read",
    possession: "any",
  })
  async getScheme(
    @graphql.Parent() parent: DynamicField
  ): Promise<Scheme | null> {
    const result = await this.service.getScheme(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
