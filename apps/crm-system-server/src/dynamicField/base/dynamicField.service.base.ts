/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DynamicField as PrismaDynamicField,
  Stage as PrismaStage,
  Scheme as PrismaScheme,
} from "@prisma/client";

export class DynamicFieldServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DynamicFieldCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dynamicField.count(args);
  }

  async dynamicFields(
    args: Prisma.DynamicFieldFindManyArgs
  ): Promise<PrismaDynamicField[]> {
    return this.prisma.dynamicField.findMany(args);
  }
  async dynamicField(
    args: Prisma.DynamicFieldFindUniqueArgs
  ): Promise<PrismaDynamicField | null> {
    return this.prisma.dynamicField.findUnique(args);
  }
  async createDynamicField(
    args: Prisma.DynamicFieldCreateArgs
  ): Promise<PrismaDynamicField> {
    return this.prisma.dynamicField.create(args);
  }
  async updateDynamicField(
    args: Prisma.DynamicFieldUpdateArgs
  ): Promise<PrismaDynamicField> {
    return this.prisma.dynamicField.update(args);
  }
  async deleteDynamicField(
    args: Prisma.DynamicFieldDeleteArgs
  ): Promise<PrismaDynamicField> {
    return this.prisma.dynamicField.delete(args);
  }

  async getStage(parentId: string): Promise<PrismaStage | null> {
    return this.prisma.dynamicField
      .findUnique({
        where: { id: parentId },
      })
      .stage();
  }

  async getScheme(parentId: string): Promise<PrismaScheme | null> {
    return this.prisma.dynamicField
      .findUnique({
        where: { id: parentId },
      })
      .scheme();
  }
}
