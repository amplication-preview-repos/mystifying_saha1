/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Transition as PrismaTransition } from "@prisma/client";

export class TransitionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TransitionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.transition.count(args);
  }

  async transitions(
    args: Prisma.TransitionFindManyArgs
  ): Promise<PrismaTransition[]> {
    return this.prisma.transition.findMany(args);
  }
  async transition(
    args: Prisma.TransitionFindUniqueArgs
  ): Promise<PrismaTransition | null> {
    return this.prisma.transition.findUnique(args);
  }
  async createTransition(
    args: Prisma.TransitionCreateArgs
  ): Promise<PrismaTransition> {
    return this.prisma.transition.create(args);
  }
  async updateTransition(
    args: Prisma.TransitionUpdateArgs
  ): Promise<PrismaTransition> {
    return this.prisma.transition.update(args);
  }
  async deleteTransition(
    args: Prisma.TransitionDeleteArgs
  ): Promise<PrismaTransition> {
    return this.prisma.transition.delete(args);
  }
}
