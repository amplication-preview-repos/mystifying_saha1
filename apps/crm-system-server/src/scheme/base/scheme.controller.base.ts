/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SchemeService } from "../scheme.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SchemeCreateInput } from "./SchemeCreateInput";
import { Scheme } from "./Scheme";
import { SchemeFindManyArgs } from "./SchemeFindManyArgs";
import { SchemeWhereUniqueInput } from "./SchemeWhereUniqueInput";
import { SchemeUpdateInput } from "./SchemeUpdateInput";
import { StageFindManyArgs } from "../../stage/base/StageFindManyArgs";
import { Stage } from "../../stage/base/Stage";
import { StageWhereUniqueInput } from "../../stage/base/StageWhereUniqueInput";
import { DynamicFieldFindManyArgs } from "../../dynamicField/base/DynamicFieldFindManyArgs";
import { DynamicField } from "../../dynamicField/base/DynamicField";
import { DynamicFieldWhereUniqueInput } from "../../dynamicField/base/DynamicFieldWhereUniqueInput";
import { ApplicationFindManyArgs } from "../../application/base/ApplicationFindManyArgs";
import { Application } from "../../application/base/Application";
import { ApplicationWhereUniqueInput } from "../../application/base/ApplicationWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SchemeControllerBase {
  constructor(
    protected readonly service: SchemeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Scheme })
  @nestAccessControl.UseRoles({
    resource: "Scheme",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createScheme(@common.Body() data: SchemeCreateInput): Promise<Scheme> {
    return await this.service.createScheme({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Scheme] })
  @ApiNestedQuery(SchemeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Scheme",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async schemes(@common.Req() request: Request): Promise<Scheme[]> {
    const args = plainToClass(SchemeFindManyArgs, request.query);
    return this.service.schemes({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Scheme })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Scheme",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async scheme(
    @common.Param() params: SchemeWhereUniqueInput
  ): Promise<Scheme | null> {
    const result = await this.service.scheme({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Scheme })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Scheme",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateScheme(
    @common.Param() params: SchemeWhereUniqueInput,
    @common.Body() data: SchemeUpdateInput
  ): Promise<Scheme | null> {
    try {
      return await this.service.updateScheme({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Scheme })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Scheme",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteScheme(
    @common.Param() params: SchemeWhereUniqueInput
  ): Promise<Scheme | null> {
    try {
      return await this.service.deleteScheme({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/stages")
  @ApiNestedQuery(StageFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Stage",
    action: "read",
    possession: "any",
  })
  async findStages(
    @common.Req() request: Request,
    @common.Param() params: SchemeWhereUniqueInput
  ): Promise<Stage[]> {
    const query = plainToClass(StageFindManyArgs, request.query);
    const results = await this.service.findStages(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        scheme: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/stages")
  @nestAccessControl.UseRoles({
    resource: "Scheme",
    action: "update",
    possession: "any",
  })
  async connectStages(
    @common.Param() params: SchemeWhereUniqueInput,
    @common.Body() body: StageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stages: {
        connect: body,
      },
    };
    await this.service.updateScheme({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/stages")
  @nestAccessControl.UseRoles({
    resource: "Scheme",
    action: "update",
    possession: "any",
  })
  async updateStages(
    @common.Param() params: SchemeWhereUniqueInput,
    @common.Body() body: StageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stages: {
        set: body,
      },
    };
    await this.service.updateScheme({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/stages")
  @nestAccessControl.UseRoles({
    resource: "Scheme",
    action: "update",
    possession: "any",
  })
  async disconnectStages(
    @common.Param() params: SchemeWhereUniqueInput,
    @common.Body() body: StageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stages: {
        disconnect: body,
      },
    };
    await this.service.updateScheme({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/dynamicFields")
  @ApiNestedQuery(DynamicFieldFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "DynamicField",
    action: "read",
    possession: "any",
  })
  async findDynamicFields(
    @common.Req() request: Request,
    @common.Param() params: SchemeWhereUniqueInput
  ): Promise<DynamicField[]> {
    const query = plainToClass(DynamicFieldFindManyArgs, request.query);
    const results = await this.service.findDynamicFields(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        value: true,

        stage: {
          select: {
            id: true,
          },
        },

        scheme: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/dynamicFields")
  @nestAccessControl.UseRoles({
    resource: "Scheme",
    action: "update",
    possession: "any",
  })
  async connectDynamicFields(
    @common.Param() params: SchemeWhereUniqueInput,
    @common.Body() body: DynamicFieldWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dynamicFields: {
        connect: body,
      },
    };
    await this.service.updateScheme({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/dynamicFields")
  @nestAccessControl.UseRoles({
    resource: "Scheme",
    action: "update",
    possession: "any",
  })
  async updateDynamicFields(
    @common.Param() params: SchemeWhereUniqueInput,
    @common.Body() body: DynamicFieldWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dynamicFields: {
        set: body,
      },
    };
    await this.service.updateScheme({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/dynamicFields")
  @nestAccessControl.UseRoles({
    resource: "Scheme",
    action: "update",
    possession: "any",
  })
  async disconnectDynamicFields(
    @common.Param() params: SchemeWhereUniqueInput,
    @common.Body() body: DynamicFieldWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dynamicFields: {
        disconnect: body,
      },
    };
    await this.service.updateScheme({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/applications")
  @ApiNestedQuery(ApplicationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "read",
    possession: "any",
  })
  async findApplications(
    @common.Req() request: Request,
    @common.Param() params: SchemeWhereUniqueInput
  ): Promise<Application[]> {
    const query = plainToClass(ApplicationFindManyArgs, request.query);
    const results = await this.service.findApplications(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        name: true,

        scheme: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/applications")
  @nestAccessControl.UseRoles({
    resource: "Scheme",
    action: "update",
    possession: "any",
  })
  async connectApplications(
    @common.Param() params: SchemeWhereUniqueInput,
    @common.Body() body: ApplicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applications: {
        connect: body,
      },
    };
    await this.service.updateScheme({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/applications")
  @nestAccessControl.UseRoles({
    resource: "Scheme",
    action: "update",
    possession: "any",
  })
  async updateApplications(
    @common.Param() params: SchemeWhereUniqueInput,
    @common.Body() body: ApplicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applications: {
        set: body,
      },
    };
    await this.service.updateScheme({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/applications")
  @nestAccessControl.UseRoles({
    resource: "Scheme",
    action: "update",
    possession: "any",
  })
  async disconnectApplications(
    @common.Param() params: SchemeWhereUniqueInput,
    @common.Body() body: ApplicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applications: {
        disconnect: body,
      },
    };
    await this.service.updateScheme({
      where: params,
      data,
      select: { id: true },
    });
  }
}
